package me.struttle.plugins.events.commands;

import java.util.List;

import org.bukkit.ChatColor;
import org.bukkit.entity.Player;

import me.struttle.plugins.events.Log;

public abstract class CommandBase {
	protected List<String> m_CommandDefinition;
	protected List<List<String>> m_Aliases;
	protected List<String> m_Permissions;
	protected String m_Definition;
	protected boolean m_Strict = false;
	
	public CommandBase(List<String> commandDefinition, List<String> permissions, String definition, boolean strict, List<List<String>> aliases)
	{
		Init(commandDefinition, permissions, definition, strict, aliases);
	}
	
	public CommandBase(List<String> commandDefinition)
	{
		Init(commandDefinition, null, ComputeAutomaticDefinition(commandDefinition), false, null);
	}
	
	public CommandBase(List<String> commandDefinition, boolean strict)
	{
		Init(commandDefinition, null, ComputeAutomaticDefinition(commandDefinition), strict, null);
	}
	
	public void Init(List<String> commandDefinition, List<String> permissions, String definition, boolean strict, List<List<String>> aliases)
	{
		m_CommandDefinition = commandDefinition;
		m_Aliases = aliases;
		m_Permissions = permissions;
		m_Definition = definition;
		m_Strict = strict;
	}
	
	private String ComputeAutomaticDefinition(List<String> commandDefinition)
	{
		String definition = "/";
		if(commandDefinition.size() > 0)
		{
			definition += commandDefinition.get(0) + " ";
			for(int i = 1; i < commandDefinition.size(); i++)
			{
				definition += "[" + commandDefinition.get(i) + "] ";
			}
		}
		return definition;
	}

	public boolean ExecuteCommand(Player player, String label, String[] args)
	{
		if(!Identify(m_CommandDefinition, label, args))
		{
			return false;
		}
		
		if(!CheckPermissions(player, m_Permissions))
		{
			player.sendMessage(ChatColor.DARK_RED + "You don't have enough permission to execute that command.");
			return false;
		}
		
		return ExecuteInternal(player, args, m_CommandDefinition.size() - 1);
	}
	
	public abstract boolean ExecuteInternal(Player player, String[] args, int indexStartingArguments);
	
	public boolean Identify(List<String> commandDefinition, String label, String[] args)
	{
		if(m_Strict)
		{
			if(commandDefinition.size() != 1 + args.length)
			{
				return false;
			}
		}
		
		if(commandDefinition.size() > 1 + args.length)
		{
			return false;
		}
		
		if(!commandDefinition.get(0).equalsIgnoreCase(label))
		{
			return false;
		}
		for(int i = 1; i < commandDefinition.length; i++)
		{
			Log.Error(label + "----" + commandDefinition.get(i) + args[i-1]);
			if(!commandDefinition.get(i).equalsIgnoreCase(args[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	
	public boolean CheckPermissions(Player player, List<String> permissions)
	{
		if(permissions == null)
			return true;
		for(String permission : permissions)
		{
			if(!player.hasPermission(permission))
			{
				return false;
			}
		}
		return true;
	}
}

